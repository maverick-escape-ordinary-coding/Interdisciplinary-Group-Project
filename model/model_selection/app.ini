[DB]
host = localhost
db = gapsquare
table = client_a
user = user_
password = 

[APP]
#filter rows based on the total package within these percentiles
outlier_percentiles = 0.05, 0.95

#to split the training set on a value of a column uncomment these
#example below is to train only using Males
#train_split_column = gender
#train_split_value = Male

#the list of numerical features to use and whether they should be scaled
#scaling does not include the final package calculation, see below
num_feature_list = company_tenure
scale_num_features = true

#one hot encoded feature list, if these need to be scaled set the second param to true
oh_cat_feature_list = job_title
scale_cat_features = true

#feature list to be categorized as labels, if these need to be scaled set the second param to true
label_cat_feature_list = division, groups, area, team, category, appointment_type, qualified_solicitor, benefit_level, non_executive_director, post_name
scale_label_features = true

#the actual salary column. Use the column that represents the FTE of the persons salary, if not available
#use the actual salary they are paid and set the conversion params below
actual_salary_column = salary_per_month_35ft

#the list of benefits/allowances to add on to calculate the total package
#if the data is not FTE these will be scaled along with the salary based on the settings below
benefits_column_list = total_bonus_amount

#uncomment and set these if the salary/allowances above are actual and not FTE
#dataset must have a column that contains the weekly hours the person works
#weekly_hours_column = weekly_hours
#fte_hours = 35

#scale the target calculated above, does not work well ATM. To discuss
scale_target = false

#the threshold % to determine overpaid or underpaid, within this threshold a person will be
#marked fairly paid
pay_threshold = 0.1

#adj salary for cost of living
use_cost_of_living = true
col_uri = http://localhost:5000/compare/{}/{}/{}
include_rent = false
location_column = location
location_reference = london

